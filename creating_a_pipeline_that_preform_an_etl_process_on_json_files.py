# -*- coding: utf-8 -*-
"""Creating a pipeline that preform an ETL process on json files.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1STtErZ1dwAxAdZW6KYt8rbnXGk5gTFh2
"""

#Creating json files containing low quality data and it is required to clean the files and save them as CSV files on drive

import random
import re
from glob import iglob
from toolz import pipe, compose
import csv
import os
import shutil
from google.colab import drive
import json
import string


punctuation_list_original = [".", ",", "!", "?", ":", ";", "(", "[", "{", "}"]

punctuation_list = punctuation_list_original.copy()

first_name = "ahmed"
second_name = "adel"
last_name = "tawfik"


#check for director exsitance so that code won't fail if you run it again

if not os.path.exists("/content/raw_data_input_json"):
  os.makedirs("/content/raw_data_input_json")

#check for director exsitance so that code won't fail if you run it again

if not os.path.exists("/content/data_output_json"):
  os.makedirs("/content/data_output_json")


#creating files as raw data input

def creating_files (x):

  y = random.choice(punctuation_list)
  content_original = {f"{x}{y}":f"{first_name}{y}{second_name}{y}{last_name}"}
  f = open(f"/content/raw_data_input_json/name{x}.json","w")
  json.dump(content_original,f)
  f.close()

  f = open(f"/content/raw_data_input_json/name{x}.json", "r")
  content_json = json.load(f)
  f.close()

  punctuation_list.remove(y)
  #print(f"the original content in name{x}.txt is : {content_original}")
  return content_json

#enforcing to create .txt files and printing their content

print(list(map(creating_files, range(1,11))))


#getting all .json file pathes

jsons = iglob("/content/raw_data_input_json/*.json")
t_jsons = list(jsons)


#reading files from file path and getting content

def reading_files(t_path):
  f = open(t_path,"r")
  content_dict = json.load(f)
  f.close()
  return content_dict


#modifing content & removing punctuation (cleaning)

def cleaning_punctuation(content_dict):

  new_content_dict = {}

  for key, value in content_dict.items():

    # Remove punctuation from key
    new_key = re.sub(f"[{re.escape(string.punctuation)}]","",key)

    # Remove punctuation from value

    new_value = re.sub(f"[{re.escape(string.punctuation)}]", " ", value)

    new_content_dict[new_key] = new_value #store the modified key & value


  return new_content_dict


#saving the new modified content to a csv file but first adjusting the new_content_dict as row so that it can be written in the csv

def saving_to_csv(new_content_dict):

 #adjusting the new_content_dict as row so that it can be written in the csv


  row = list(list(new_content_dict.items())[0])

  f_csv = open(f'name{row[0]}.csv', 'w')

  writer = csv.writer(f_csv)
  field = ["id", "name"]

  writer.writerow(field)
  writer.writerow(row)

  f_csv.close()

  csv_name = f"name{row[0]}.csv"



  return csv_name


#moving the csv files to the output data folder

def moving_files(csv_name):

  if not os.path.exists(f"/content/data_output_json/{csv_name}"):
    shutil.move(os.path.join("/content", csv_name), "/content/data_output_json")

  if os.path.exists(os.path.join("/content", csv_name)):
    os.remove(os.path.join("/content", csv_name)) #if the source and destination path are on the same filesystem shutil.move will leave a copy behind

  csv_new_path = os.path.join("/content/data_output_json", csv_name)
  return csv_new_path



pipeline = compose(moving_files, saving_to_csv, cleaning_punctuation, reading_files)



print(list(map(pipeline, t_jsons)))

#mounting the output data folder to the drive

drive.mount('/content/drive')

#check for director exsitance in drive so that code won't fail if you run it again

if not os.path.exists("/content/drive/My Drive/project_ETL_json"):
  os.makedirs("/content/drive/My Drive/project_ETL_json")

#check for director exsitance in drive so that code won't fail if you run it again

if not os.path.exists("/content/drive/My Drive/project_ETL/data_output_json"):
  shutil.move("/content/data_output_json", "/content/drive/My Drive/project_ETL_json")


if not os.path.exists("/content/drive/My Drive/project_ETL/raw_data_input_json"):
  shutil.move("/content/raw_data_input_json", "/content/drive/My Drive/project_ETL_json")